CREATE EXTENSION pgcrypto;
CREATE EXTENSION moddatetime;

-- public.game_states definition
CREATE TABLE public.game_states (
                                    id int2 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
                                    state varchar NOT NULL,
                                    CONSTRAINT game_state_pkey PRIMARY KEY (id)
);

-- public.winners definition
CREATE TABLE public.winners (
                                id int2 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
                                winner varchar NOT NULL,
                                CONSTRAINT winner_pkey PRIMARY KEY (id)
);

-- public.players definition
CREATE TABLE public.players (
                                id int2 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
                                player varchar NOT NULL,
                                CONSTRAINT player_pkey PRIMARY KEY (id)
);

-- public.games definition
CREATE TABLE public.games (
                              id int8 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
                              short_id varchar(6) NOT NULL,
                              player_one_id uuid NOT NULL,
                              player_two_id uuid NOT NULL,
                              fk_game_state_id int2 NOT NULL,
                              fk_winner_id int2 NULL,
                              created_on timestamptz NOT NULL DEFAULT now(),
                              updated_on timestamptz NOT NULL DEFAULT now(),
                              CONSTRAINT game_pkey PRIMARY KEY (id),
                              CONSTRAINT game_game_state_id_fkey FOREIGN KEY (fk_game_state_id) REFERENCES public.game_states(id),
                              CONSTRAINT game_winner_fkey FOREIGN KEY (fk_winner_id) REFERENCES public.winners(id)
);
CREATE UNIQUE INDEX game_short_id_uindex ON public.games USING btree (short_id);

CREATE TRIGGER mdt_games
    BEFORE UPDATE ON games
    FOR EACH ROW
EXECUTE PROCEDURE moddatetime (updated_on);

-- public.moves definition
-- TODO: Should we change this to a short_id or uuid so that no one knows how many moves we host?
CREATE TABLE public.moves (
                              id int8 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
                              board_x int2 NOT NULL,
                              board_y int2 NOT NULL,
                              tile_x int2 NOT NULL,
                              tile_y int2 NOT NULL,
                              fk_game_short_id varchar(6) NOT NULL,
                              fk_player int2 NOT NULL,
                              created_on timestamptz NOT NULL DEFAULT now(),
                              CONSTRAINT move_pkey PRIMARY KEY (id),
                              CONSTRAINT move_fk_game_short_id_fkey FOREIGN KEY (fk_game_short_id) REFERENCES public.games(short_id),
                              CONSTRAINT move_fk_player_fkey FOREIGN KEY (fk_player) REFERENCES public.players(id)
);


-- Insert Data

INSERT INTO public.game_states (id, state) VALUES
(0, 'Created'),
(1, 'Connected'),
(2, 'InProgress'),
(3, 'Finished');

INSERT INTO public.winners (id, winner) VALUES
(0, 'Cross'),
(1, 'Circle'),
(2, 'None'),
(3, 'Draw');

INSERT INTO public.players (id, player) VALUES
(0, 'Cross'),
(1, 'Circle');

-- Enable Realtime
begin; 
  -- remove the realtime publication
  drop publication if exists supabase_realtime; 

  -- re-create the publication but don't enable it for any tables
  create publication supabase_realtime;
commit;

-- add a table to the publication
alter publication supabase_realtime add table moves;

import { AzureFunction, Context } from '@azure/functions';
import { createPool, sql } from 'slonik';
import { GameState } from '@ttt/lib/db/GameState';
import ShortUniqueId from 'short-unique-id';
import { connectionString } from '../environment';

interface CustomContext extends Context {
  res: {
    status?: number;
    body: {
      shortId: string;
      playerId: string;
    };
  };
}

const pool = createPool(connectionString);

const httpTrigger: AzureFunction = async function (
  context: CustomContext,
): Promise<void> {
  const game = {
    shortId: new ShortUniqueId().randomUUID(),
    gameState: GameState.Created,
  };

  const playerOneId = await pool.connect((connection) => {
    return connection.oneFirst(sql<queries.Game>`
        insert into games (short_id, player_one_id, player_two_id, fk_game_state_id, fk_winner_id)
        values (${game.shortId}, gen_random_uuid(), gen_random_uuid(), ${game.gameState}, null)
        returning player_one_id`);
  });

  context.res = {
    body: {
      shortId: game.shortId,
      playerId: playerOneId,
    },
  };
};

export default httpTrigger;

declare namespace queries {
  // Generated by @slonik/typegen

  /** - query: `insert into games (short_id, player_one_... [truncated] ...uid(), $2, null) returning player_one_id` */
  export interface Game {
    /** regtype: `uuid` */
    player_one_id: string;
  }
}

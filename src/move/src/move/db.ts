import { DatabaseConnectionType, sql } from "slonik";
import { RequestBody } from "./requestBody";
import { GameState } from "@ttt/lib/db/GameState";

export const getMoves = async (
  connection: DatabaseConnectionType,
  id: string
) => {
  return connection.any(
    sql<queries.Move>`select board_x, board_y, tile_x, tile_y, fk_game_short_id
                      from moves
                      where fk_game_short_id = ${id}
                      order by created_on asc`
  );
};

export const getGameState = async (
  connection: DatabaseConnectionType,
  shortId: string
) => {
  return connection.maybeOneFirst(
    sql<queries.Game>`select fk_game_state_id from games where short_id = ${shortId}`
  );
};

export const getPlayerOneId = async (
  connection: DatabaseConnectionType,
  id: string
) => {
  return connection.maybeOneFirst(sql<queries.GetPlayerOneId>`
      select player_one_id
      from games
      where short_id = ${id}`);
};

export const getPlayerTwoId = async (
  connection: DatabaseConnectionType,
  id: string
) => {
  return connection.maybeOneFirst(sql<queries.GetPlayerTwoId>`
      select player_two_id
      from games
      where short_id = ${id}`);
};

export const createMove = async (
  connection: DatabaseConnectionType,
  move: RequestBody
) => {
  return connection.query(sql<queries._void>`
    insert into moves (board_x, board_y, tile_x, tile_y, fk_game_short_id)
    values (${move.boardX}, ${move.boardY}, ${move.tileX}, ${move.tileY}, ${move.gameId})`);
};

export const updateGameState = async (
  connection: DatabaseConnectionType,
  id: string,
  state: GameState
) => {
  return connection.query(sql<queries._void>`
        update games
        set fk_game_state_id = ${state}
        where short_id = ${id}`);
};

export declare namespace queries {
  // Generated by @slonik/typegen

  /** - query: `select board_x, board_y, tile_x, tile_y,... [truncated] ...me_short_id = $1 order by created_on asc` */
  export interface Move {
    /** column: `public.moves.board_x`, not null: `true`, regtype: `smallint` */
    board_x: number;

    /** column: `public.moves.board_y`, not null: `true`, regtype: `smallint` */
    board_y: number;

    /** column: `public.moves.tile_x`, not null: `true`, regtype: `smallint` */
    tile_x: number;

    /** column: `public.moves.tile_y`, not null: `true`, regtype: `smallint` */
    tile_y: number;

    /** column: `public.moves.fk_game_short_id`, not null: `true`, regtype: `character varying(6)` */
    fk_game_short_id: string;
  }

  /** - query: `select fk_game_state_id from games where short_id = $1` */
  export interface Game {
    /** column: `public.games.fk_game_state_id`, not null: `true`, regtype: `smallint` */
    fk_game_state_id: number;
  }

  /** - query: `select player_one_id from games where short_id = $1` */
  export interface GetPlayerOneId {
    /** column: `public.games.player_one_id`, not null: `true`, regtype: `uuid` */
    player_one_id: string;
  }

  /** - query: `select player_two_id from games where short_id = $1` */
  export interface GetPlayerTwoId {
    /** column: `public.games.player_two_id`, not null: `true`, regtype: `uuid` */
    player_two_id: string;
  }

  /**
   * queries:
   * - `insert into moves (board_x, board_y, tile_x, tile_y, fk_game_short_id) values ($1, $2, $3, $4, $5)`
   * - `update games set fk_game_state_id = $1 where short_id = $2`
   */
  export type _void = {};
}
